// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ilcm96/dku-aegis-library/ent/booklog"
)

// BookLog is the model entity for the BookLog schema.
type BookLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Action holds the value of the "action" field.
	Action booklog.Action `json:"action,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// BookID holds the value of the "book_id" field.
	BookID int `json:"book_id,omitempty"`
	// BookTitle holds the value of the "book_title" field.
	BookTitle string `json:"book_title,omitempty"`
	// RequestID holds the value of the "request_id" field.
	RequestID string `json:"request_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BookLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case booklog.FieldID, booklog.FieldUserID, booklog.FieldBookID:
			values[i] = new(sql.NullInt64)
		case booklog.FieldAction, booklog.FieldBookTitle, booklog.FieldRequestID:
			values[i] = new(sql.NullString)
		case booklog.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BookLog fields.
func (bl *BookLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case booklog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bl.ID = int(value.Int64)
		case booklog.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				bl.Action = booklog.Action(value.String)
			}
		case booklog.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				bl.UserID = int(value.Int64)
			}
		case booklog.FieldBookID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field book_id", values[i])
			} else if value.Valid {
				bl.BookID = int(value.Int64)
			}
		case booklog.FieldBookTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field book_title", values[i])
			} else if value.Valid {
				bl.BookTitle = value.String
			}
		case booklog.FieldRequestID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value.Valid {
				bl.RequestID = value.String
			}
		case booklog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bl.CreatedAt = value.Time
			}
		default:
			bl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BookLog.
// This includes values selected through modifiers, order, etc.
func (bl *BookLog) Value(name string) (ent.Value, error) {
	return bl.selectValues.Get(name)
}

// Update returns a builder for updating this BookLog.
// Note that you need to call BookLog.Unwrap() before calling this method if this BookLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (bl *BookLog) Update() *BookLogUpdateOne {
	return NewBookLogClient(bl.config).UpdateOne(bl)
}

// Unwrap unwraps the BookLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bl *BookLog) Unwrap() *BookLog {
	_tx, ok := bl.config.driver.(*txDriver)
	if !ok {
		panic("ent: BookLog is not a transactional entity")
	}
	bl.config.driver = _tx.drv
	return bl
}

// String implements the fmt.Stringer.
func (bl *BookLog) String() string {
	var builder strings.Builder
	builder.WriteString("BookLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bl.ID))
	builder.WriteString("action=")
	builder.WriteString(fmt.Sprintf("%v", bl.Action))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", bl.UserID))
	builder.WriteString(", ")
	builder.WriteString("book_id=")
	builder.WriteString(fmt.Sprintf("%v", bl.BookID))
	builder.WriteString(", ")
	builder.WriteString("book_title=")
	builder.WriteString(bl.BookTitle)
	builder.WriteString(", ")
	builder.WriteString("request_id=")
	builder.WriteString(bl.RequestID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bl.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BookLogs is a parsable slice of BookLog.
type BookLogs []*BookLog
