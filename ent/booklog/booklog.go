// Code generated by ent, DO NOT EDIT.

package booklog

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the booklog type in the database.
	Label = "book_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAction holds the string denoting the action field in the database.
	FieldAction = "action"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldBookID holds the string denoting the book_id field in the database.
	FieldBookID = "book_id"
	// FieldBookTitle holds the string denoting the book_title field in the database.
	FieldBookTitle = "book_title"
	// FieldRequestID holds the string denoting the request_id field in the database.
	FieldRequestID = "request_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the booklog in the database.
	Table = "book_logs"
)

// Columns holds all SQL columns for booklog fields.
var Columns = []string{
	FieldID,
	FieldAction,
	FieldUserID,
	FieldBookID,
	FieldBookTitle,
	FieldRequestID,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Action defines the type for the "action" enum field.
type Action string

// Action values.
const (
	ActionCREATE Action = "CREATE"
	ActionUPDATE Action = "UPDATE"
	ActionDELETE Action = "DELETE"
	ActionBORROW Action = "BORROW"
	ActionRETURN Action = "RETURN"
)

func (a Action) String() string {
	return string(a)
}

// ActionValidator is a validator for the "action" field enum values. It is called by the builders before save.
func ActionValidator(a Action) error {
	switch a {
	case ActionCREATE, ActionUPDATE, ActionDELETE, ActionBORROW, ActionRETURN:
		return nil
	default:
		return fmt.Errorf("booklog: invalid enum value for action field: %q", a)
	}
}

// OrderOption defines the ordering options for the BookLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAction orders the results by the action field.
func ByAction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAction, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByBookID orders the results by the book_id field.
func ByBookID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBookID, opts...).ToFunc()
}

// ByBookTitle orders the results by the book_title field.
func ByBookTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBookTitle, opts...).ToFunc()
}

// ByRequestID orders the results by the request_id field.
func ByRequestID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
