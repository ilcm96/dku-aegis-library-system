// Code generated by ent, DO NOT EDIT.

package booklog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ilcm96/dku-aegis-library/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BookLog {
	return predicate.BookLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BookLog {
	return predicate.BookLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BookLog {
	return predicate.BookLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BookLog {
	return predicate.BookLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BookLog {
	return predicate.BookLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BookLog {
	return predicate.BookLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BookLog {
	return predicate.BookLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BookLog {
	return predicate.BookLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BookLog {
	return predicate.BookLog(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.BookLog {
	return predicate.BookLog(sql.FieldEQ(FieldUserID, v))
}

// BookID applies equality check predicate on the "book_id" field. It's identical to BookIDEQ.
func BookID(v int) predicate.BookLog {
	return predicate.BookLog(sql.FieldEQ(FieldBookID, v))
}

// BookTitle applies equality check predicate on the "book_title" field. It's identical to BookTitleEQ.
func BookTitle(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldEQ(FieldBookTitle, v))
}

// RequestID applies equality check predicate on the "request_id" field. It's identical to RequestIDEQ.
func RequestID(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldEQ(FieldRequestID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BookLog {
	return predicate.BookLog(sql.FieldEQ(FieldCreatedAt, v))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v Action) predicate.BookLog {
	return predicate.BookLog(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v Action) predicate.BookLog {
	return predicate.BookLog(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...Action) predicate.BookLog {
	return predicate.BookLog(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...Action) predicate.BookLog {
	return predicate.BookLog(sql.FieldNotIn(FieldAction, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.BookLog {
	return predicate.BookLog(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.BookLog {
	return predicate.BookLog(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.BookLog {
	return predicate.BookLog(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.BookLog {
	return predicate.BookLog(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.BookLog {
	return predicate.BookLog(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.BookLog {
	return predicate.BookLog(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.BookLog {
	return predicate.BookLog(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.BookLog {
	return predicate.BookLog(sql.FieldLTE(FieldUserID, v))
}

// BookIDEQ applies the EQ predicate on the "book_id" field.
func BookIDEQ(v int) predicate.BookLog {
	return predicate.BookLog(sql.FieldEQ(FieldBookID, v))
}

// BookIDNEQ applies the NEQ predicate on the "book_id" field.
func BookIDNEQ(v int) predicate.BookLog {
	return predicate.BookLog(sql.FieldNEQ(FieldBookID, v))
}

// BookIDIn applies the In predicate on the "book_id" field.
func BookIDIn(vs ...int) predicate.BookLog {
	return predicate.BookLog(sql.FieldIn(FieldBookID, vs...))
}

// BookIDNotIn applies the NotIn predicate on the "book_id" field.
func BookIDNotIn(vs ...int) predicate.BookLog {
	return predicate.BookLog(sql.FieldNotIn(FieldBookID, vs...))
}

// BookIDGT applies the GT predicate on the "book_id" field.
func BookIDGT(v int) predicate.BookLog {
	return predicate.BookLog(sql.FieldGT(FieldBookID, v))
}

// BookIDGTE applies the GTE predicate on the "book_id" field.
func BookIDGTE(v int) predicate.BookLog {
	return predicate.BookLog(sql.FieldGTE(FieldBookID, v))
}

// BookIDLT applies the LT predicate on the "book_id" field.
func BookIDLT(v int) predicate.BookLog {
	return predicate.BookLog(sql.FieldLT(FieldBookID, v))
}

// BookIDLTE applies the LTE predicate on the "book_id" field.
func BookIDLTE(v int) predicate.BookLog {
	return predicate.BookLog(sql.FieldLTE(FieldBookID, v))
}

// BookTitleEQ applies the EQ predicate on the "book_title" field.
func BookTitleEQ(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldEQ(FieldBookTitle, v))
}

// BookTitleNEQ applies the NEQ predicate on the "book_title" field.
func BookTitleNEQ(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldNEQ(FieldBookTitle, v))
}

// BookTitleIn applies the In predicate on the "book_title" field.
func BookTitleIn(vs ...string) predicate.BookLog {
	return predicate.BookLog(sql.FieldIn(FieldBookTitle, vs...))
}

// BookTitleNotIn applies the NotIn predicate on the "book_title" field.
func BookTitleNotIn(vs ...string) predicate.BookLog {
	return predicate.BookLog(sql.FieldNotIn(FieldBookTitle, vs...))
}

// BookTitleGT applies the GT predicate on the "book_title" field.
func BookTitleGT(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldGT(FieldBookTitle, v))
}

// BookTitleGTE applies the GTE predicate on the "book_title" field.
func BookTitleGTE(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldGTE(FieldBookTitle, v))
}

// BookTitleLT applies the LT predicate on the "book_title" field.
func BookTitleLT(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldLT(FieldBookTitle, v))
}

// BookTitleLTE applies the LTE predicate on the "book_title" field.
func BookTitleLTE(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldLTE(FieldBookTitle, v))
}

// BookTitleContains applies the Contains predicate on the "book_title" field.
func BookTitleContains(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldContains(FieldBookTitle, v))
}

// BookTitleHasPrefix applies the HasPrefix predicate on the "book_title" field.
func BookTitleHasPrefix(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldHasPrefix(FieldBookTitle, v))
}

// BookTitleHasSuffix applies the HasSuffix predicate on the "book_title" field.
func BookTitleHasSuffix(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldHasSuffix(FieldBookTitle, v))
}

// BookTitleEqualFold applies the EqualFold predicate on the "book_title" field.
func BookTitleEqualFold(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldEqualFold(FieldBookTitle, v))
}

// BookTitleContainsFold applies the ContainsFold predicate on the "book_title" field.
func BookTitleContainsFold(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldContainsFold(FieldBookTitle, v))
}

// RequestIDEQ applies the EQ predicate on the "request_id" field.
func RequestIDEQ(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldEQ(FieldRequestID, v))
}

// RequestIDNEQ applies the NEQ predicate on the "request_id" field.
func RequestIDNEQ(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldNEQ(FieldRequestID, v))
}

// RequestIDIn applies the In predicate on the "request_id" field.
func RequestIDIn(vs ...string) predicate.BookLog {
	return predicate.BookLog(sql.FieldIn(FieldRequestID, vs...))
}

// RequestIDNotIn applies the NotIn predicate on the "request_id" field.
func RequestIDNotIn(vs ...string) predicate.BookLog {
	return predicate.BookLog(sql.FieldNotIn(FieldRequestID, vs...))
}

// RequestIDGT applies the GT predicate on the "request_id" field.
func RequestIDGT(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldGT(FieldRequestID, v))
}

// RequestIDGTE applies the GTE predicate on the "request_id" field.
func RequestIDGTE(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldGTE(FieldRequestID, v))
}

// RequestIDLT applies the LT predicate on the "request_id" field.
func RequestIDLT(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldLT(FieldRequestID, v))
}

// RequestIDLTE applies the LTE predicate on the "request_id" field.
func RequestIDLTE(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldLTE(FieldRequestID, v))
}

// RequestIDContains applies the Contains predicate on the "request_id" field.
func RequestIDContains(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldContains(FieldRequestID, v))
}

// RequestIDHasPrefix applies the HasPrefix predicate on the "request_id" field.
func RequestIDHasPrefix(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldHasPrefix(FieldRequestID, v))
}

// RequestIDHasSuffix applies the HasSuffix predicate on the "request_id" field.
func RequestIDHasSuffix(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldHasSuffix(FieldRequestID, v))
}

// RequestIDEqualFold applies the EqualFold predicate on the "request_id" field.
func RequestIDEqualFold(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldEqualFold(FieldRequestID, v))
}

// RequestIDContainsFold applies the ContainsFold predicate on the "request_id" field.
func RequestIDContainsFold(v string) predicate.BookLog {
	return predicate.BookLog(sql.FieldContainsFold(FieldRequestID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BookLog {
	return predicate.BookLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BookLog {
	return predicate.BookLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BookLog {
	return predicate.BookLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BookLog {
	return predicate.BookLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BookLog {
	return predicate.BookLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BookLog {
	return predicate.BookLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BookLog {
	return predicate.BookLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BookLog {
	return predicate.BookLog(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BookLog) predicate.BookLog {
	return predicate.BookLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BookLog) predicate.BookLog {
	return predicate.BookLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BookLog) predicate.BookLog {
	return predicate.BookLog(sql.NotPredicates(p))
}
