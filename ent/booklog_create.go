// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ilcm96/dku-aegis-library/ent/booklog"
)

// BookLogCreate is the builder for creating a BookLog entity.
type BookLogCreate struct {
	config
	mutation *BookLogMutation
	hooks    []Hook
}

// SetAction sets the "action" field.
func (blc *BookLogCreate) SetAction(b booklog.Action) *BookLogCreate {
	blc.mutation.SetAction(b)
	return blc
}

// SetUserID sets the "user_id" field.
func (blc *BookLogCreate) SetUserID(i int) *BookLogCreate {
	blc.mutation.SetUserID(i)
	return blc
}

// SetBookID sets the "book_id" field.
func (blc *BookLogCreate) SetBookID(i int) *BookLogCreate {
	blc.mutation.SetBookID(i)
	return blc
}

// SetBookTitle sets the "book_title" field.
func (blc *BookLogCreate) SetBookTitle(s string) *BookLogCreate {
	blc.mutation.SetBookTitle(s)
	return blc
}

// SetRequestID sets the "request_id" field.
func (blc *BookLogCreate) SetRequestID(s string) *BookLogCreate {
	blc.mutation.SetRequestID(s)
	return blc
}

// SetCreatedAt sets the "created_at" field.
func (blc *BookLogCreate) SetCreatedAt(t time.Time) *BookLogCreate {
	blc.mutation.SetCreatedAt(t)
	return blc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (blc *BookLogCreate) SetNillableCreatedAt(t *time.Time) *BookLogCreate {
	if t != nil {
		blc.SetCreatedAt(*t)
	}
	return blc
}

// Mutation returns the BookLogMutation object of the builder.
func (blc *BookLogCreate) Mutation() *BookLogMutation {
	return blc.mutation
}

// Save creates the BookLog in the database.
func (blc *BookLogCreate) Save(ctx context.Context) (*BookLog, error) {
	blc.defaults()
	return withHooks(ctx, blc.sqlSave, blc.mutation, blc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (blc *BookLogCreate) SaveX(ctx context.Context) *BookLog {
	v, err := blc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (blc *BookLogCreate) Exec(ctx context.Context) error {
	_, err := blc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (blc *BookLogCreate) ExecX(ctx context.Context) {
	if err := blc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (blc *BookLogCreate) defaults() {
	if _, ok := blc.mutation.CreatedAt(); !ok {
		v := booklog.DefaultCreatedAt()
		blc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (blc *BookLogCreate) check() error {
	if _, ok := blc.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "BookLog.action"`)}
	}
	if v, ok := blc.mutation.Action(); ok {
		if err := booklog.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "BookLog.action": %w`, err)}
		}
	}
	if _, ok := blc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "BookLog.user_id"`)}
	}
	if _, ok := blc.mutation.BookID(); !ok {
		return &ValidationError{Name: "book_id", err: errors.New(`ent: missing required field "BookLog.book_id"`)}
	}
	if _, ok := blc.mutation.BookTitle(); !ok {
		return &ValidationError{Name: "book_title", err: errors.New(`ent: missing required field "BookLog.book_title"`)}
	}
	if _, ok := blc.mutation.RequestID(); !ok {
		return &ValidationError{Name: "request_id", err: errors.New(`ent: missing required field "BookLog.request_id"`)}
	}
	if _, ok := blc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BookLog.created_at"`)}
	}
	return nil
}

func (blc *BookLogCreate) sqlSave(ctx context.Context) (*BookLog, error) {
	if err := blc.check(); err != nil {
		return nil, err
	}
	_node, _spec := blc.createSpec()
	if err := sqlgraph.CreateNode(ctx, blc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	blc.mutation.id = &_node.ID
	blc.mutation.done = true
	return _node, nil
}

func (blc *BookLogCreate) createSpec() (*BookLog, *sqlgraph.CreateSpec) {
	var (
		_node = &BookLog{config: blc.config}
		_spec = sqlgraph.NewCreateSpec(booklog.Table, sqlgraph.NewFieldSpec(booklog.FieldID, field.TypeInt))
	)
	if value, ok := blc.mutation.Action(); ok {
		_spec.SetField(booklog.FieldAction, field.TypeEnum, value)
		_node.Action = value
	}
	if value, ok := blc.mutation.UserID(); ok {
		_spec.SetField(booklog.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := blc.mutation.BookID(); ok {
		_spec.SetField(booklog.FieldBookID, field.TypeInt, value)
		_node.BookID = value
	}
	if value, ok := blc.mutation.BookTitle(); ok {
		_spec.SetField(booklog.FieldBookTitle, field.TypeString, value)
		_node.BookTitle = value
	}
	if value, ok := blc.mutation.RequestID(); ok {
		_spec.SetField(booklog.FieldRequestID, field.TypeString, value)
		_node.RequestID = value
	}
	if value, ok := blc.mutation.CreatedAt(); ok {
		_spec.SetField(booklog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// BookLogCreateBulk is the builder for creating many BookLog entities in bulk.
type BookLogCreateBulk struct {
	config
	err      error
	builders []*BookLogCreate
}

// Save creates the BookLog entities in the database.
func (blcb *BookLogCreateBulk) Save(ctx context.Context) ([]*BookLog, error) {
	if blcb.err != nil {
		return nil, blcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(blcb.builders))
	nodes := make([]*BookLog, len(blcb.builders))
	mutators := make([]Mutator, len(blcb.builders))
	for i := range blcb.builders {
		func(i int, root context.Context) {
			builder := blcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BookLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, blcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, blcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, blcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (blcb *BookLogCreateBulk) SaveX(ctx context.Context) []*BookLog {
	v, err := blcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (blcb *BookLogCreateBulk) Exec(ctx context.Context) error {
	_, err := blcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (blcb *BookLogCreateBulk) ExecX(ctx context.Context) {
	if err := blcb.Exec(ctx); err != nil {
		panic(err)
	}
}
