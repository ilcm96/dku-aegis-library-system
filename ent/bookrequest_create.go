// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ilcm96/dku-aegis-library/ent/bookrequest"
)

// BookRequestCreate is the builder for creating a BookRequest entity.
type BookRequestCreate struct {
	config
	mutation *BookRequestMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (brc *BookRequestCreate) SetUserID(i int) *BookRequestCreate {
	brc.mutation.SetUserID(i)
	return brc
}

// SetTitle sets the "title" field.
func (brc *BookRequestCreate) SetTitle(s string) *BookRequestCreate {
	brc.mutation.SetTitle(s)
	return brc
}

// SetAuthor sets the "author" field.
func (brc *BookRequestCreate) SetAuthor(s string) *BookRequestCreate {
	brc.mutation.SetAuthor(s)
	return brc
}

// SetPublisher sets the "publisher" field.
func (brc *BookRequestCreate) SetPublisher(s string) *BookRequestCreate {
	brc.mutation.SetPublisher(s)
	return brc
}

// SetReason sets the "reason" field.
func (brc *BookRequestCreate) SetReason(s string) *BookRequestCreate {
	brc.mutation.SetReason(s)
	return brc
}

// SetApproved sets the "approved" field.
func (brc *BookRequestCreate) SetApproved(b bookrequest.Approved) *BookRequestCreate {
	brc.mutation.SetApproved(b)
	return brc
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (brc *BookRequestCreate) SetNillableApproved(b *bookrequest.Approved) *BookRequestCreate {
	if b != nil {
		brc.SetApproved(*b)
	}
	return brc
}

// SetCreatedAt sets the "created_at" field.
func (brc *BookRequestCreate) SetCreatedAt(t time.Time) *BookRequestCreate {
	brc.mutation.SetCreatedAt(t)
	return brc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (brc *BookRequestCreate) SetNillableCreatedAt(t *time.Time) *BookRequestCreate {
	if t != nil {
		brc.SetCreatedAt(*t)
	}
	return brc
}

// SetUpdatedAt sets the "updated_at" field.
func (brc *BookRequestCreate) SetUpdatedAt(t time.Time) *BookRequestCreate {
	brc.mutation.SetUpdatedAt(t)
	return brc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (brc *BookRequestCreate) SetNillableUpdatedAt(t *time.Time) *BookRequestCreate {
	if t != nil {
		brc.SetUpdatedAt(*t)
	}
	return brc
}

// Mutation returns the BookRequestMutation object of the builder.
func (brc *BookRequestCreate) Mutation() *BookRequestMutation {
	return brc.mutation
}

// Save creates the BookRequest in the database.
func (brc *BookRequestCreate) Save(ctx context.Context) (*BookRequest, error) {
	brc.defaults()
	return withHooks(ctx, brc.sqlSave, brc.mutation, brc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (brc *BookRequestCreate) SaveX(ctx context.Context) *BookRequest {
	v, err := brc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brc *BookRequestCreate) Exec(ctx context.Context) error {
	_, err := brc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brc *BookRequestCreate) ExecX(ctx context.Context) {
	if err := brc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (brc *BookRequestCreate) defaults() {
	if _, ok := brc.mutation.Approved(); !ok {
		v := bookrequest.DefaultApproved
		brc.mutation.SetApproved(v)
	}
	if _, ok := brc.mutation.CreatedAt(); !ok {
		v := bookrequest.DefaultCreatedAt()
		brc.mutation.SetCreatedAt(v)
	}
	if _, ok := brc.mutation.UpdatedAt(); !ok {
		v := bookrequest.DefaultUpdatedAt()
		brc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (brc *BookRequestCreate) check() error {
	if _, ok := brc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "BookRequest.user_id"`)}
	}
	if _, ok := brc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "BookRequest.title"`)}
	}
	if _, ok := brc.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "BookRequest.author"`)}
	}
	if _, ok := brc.mutation.Publisher(); !ok {
		return &ValidationError{Name: "publisher", err: errors.New(`ent: missing required field "BookRequest.publisher"`)}
	}
	if _, ok := brc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`ent: missing required field "BookRequest.reason"`)}
	}
	if _, ok := brc.mutation.Approved(); !ok {
		return &ValidationError{Name: "approved", err: errors.New(`ent: missing required field "BookRequest.approved"`)}
	}
	if v, ok := brc.mutation.Approved(); ok {
		if err := bookrequest.ApprovedValidator(v); err != nil {
			return &ValidationError{Name: "approved", err: fmt.Errorf(`ent: validator failed for field "BookRequest.approved": %w`, err)}
		}
	}
	if _, ok := brc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BookRequest.created_at"`)}
	}
	if _, ok := brc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BookRequest.updated_at"`)}
	}
	return nil
}

func (brc *BookRequestCreate) sqlSave(ctx context.Context) (*BookRequest, error) {
	if err := brc.check(); err != nil {
		return nil, err
	}
	_node, _spec := brc.createSpec()
	if err := sqlgraph.CreateNode(ctx, brc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	brc.mutation.id = &_node.ID
	brc.mutation.done = true
	return _node, nil
}

func (brc *BookRequestCreate) createSpec() (*BookRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &BookRequest{config: brc.config}
		_spec = sqlgraph.NewCreateSpec(bookrequest.Table, sqlgraph.NewFieldSpec(bookrequest.FieldID, field.TypeInt))
	)
	if value, ok := brc.mutation.UserID(); ok {
		_spec.SetField(bookrequest.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := brc.mutation.Title(); ok {
		_spec.SetField(bookrequest.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := brc.mutation.Author(); ok {
		_spec.SetField(bookrequest.FieldAuthor, field.TypeString, value)
		_node.Author = value
	}
	if value, ok := brc.mutation.Publisher(); ok {
		_spec.SetField(bookrequest.FieldPublisher, field.TypeString, value)
		_node.Publisher = value
	}
	if value, ok := brc.mutation.Reason(); ok {
		_spec.SetField(bookrequest.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := brc.mutation.Approved(); ok {
		_spec.SetField(bookrequest.FieldApproved, field.TypeEnum, value)
		_node.Approved = value
	}
	if value, ok := brc.mutation.CreatedAt(); ok {
		_spec.SetField(bookrequest.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := brc.mutation.UpdatedAt(); ok {
		_spec.SetField(bookrequest.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// BookRequestCreateBulk is the builder for creating many BookRequest entities in bulk.
type BookRequestCreateBulk struct {
	config
	err      error
	builders []*BookRequestCreate
}

// Save creates the BookRequest entities in the database.
func (brcb *BookRequestCreateBulk) Save(ctx context.Context) ([]*BookRequest, error) {
	if brcb.err != nil {
		return nil, brcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(brcb.builders))
	nodes := make([]*BookRequest, len(brcb.builders))
	mutators := make([]Mutator, len(brcb.builders))
	for i := range brcb.builders {
		func(i int, root context.Context) {
			builder := brcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BookRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, brcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, brcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, brcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (brcb *BookRequestCreateBulk) SaveX(ctx context.Context) []*BookRequest {
	v, err := brcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brcb *BookRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := brcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brcb *BookRequestCreateBulk) ExecX(ctx context.Context) {
	if err := brcb.Exec(ctx); err != nil {
		panic(err)
	}
}
