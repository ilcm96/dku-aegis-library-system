// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ilcm96/dku-aegis-library/ent/bookrequest"
	"github.com/ilcm96/dku-aegis-library/ent/predicate"
)

// BookRequestUpdate is the builder for updating BookRequest entities.
type BookRequestUpdate struct {
	config
	hooks    []Hook
	mutation *BookRequestMutation
}

// Where appends a list predicates to the BookRequestUpdate builder.
func (bru *BookRequestUpdate) Where(ps ...predicate.BookRequest) *BookRequestUpdate {
	bru.mutation.Where(ps...)
	return bru
}

// SetUserID sets the "user_id" field.
func (bru *BookRequestUpdate) SetUserID(i int) *BookRequestUpdate {
	bru.mutation.ResetUserID()
	bru.mutation.SetUserID(i)
	return bru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bru *BookRequestUpdate) SetNillableUserID(i *int) *BookRequestUpdate {
	if i != nil {
		bru.SetUserID(*i)
	}
	return bru
}

// AddUserID adds i to the "user_id" field.
func (bru *BookRequestUpdate) AddUserID(i int) *BookRequestUpdate {
	bru.mutation.AddUserID(i)
	return bru
}

// SetTitle sets the "title" field.
func (bru *BookRequestUpdate) SetTitle(s string) *BookRequestUpdate {
	bru.mutation.SetTitle(s)
	return bru
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bru *BookRequestUpdate) SetNillableTitle(s *string) *BookRequestUpdate {
	if s != nil {
		bru.SetTitle(*s)
	}
	return bru
}

// SetAuthor sets the "author" field.
func (bru *BookRequestUpdate) SetAuthor(s string) *BookRequestUpdate {
	bru.mutation.SetAuthor(s)
	return bru
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (bru *BookRequestUpdate) SetNillableAuthor(s *string) *BookRequestUpdate {
	if s != nil {
		bru.SetAuthor(*s)
	}
	return bru
}

// SetPublisher sets the "publisher" field.
func (bru *BookRequestUpdate) SetPublisher(s string) *BookRequestUpdate {
	bru.mutation.SetPublisher(s)
	return bru
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (bru *BookRequestUpdate) SetNillablePublisher(s *string) *BookRequestUpdate {
	if s != nil {
		bru.SetPublisher(*s)
	}
	return bru
}

// SetReason sets the "reason" field.
func (bru *BookRequestUpdate) SetReason(s string) *BookRequestUpdate {
	bru.mutation.SetReason(s)
	return bru
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (bru *BookRequestUpdate) SetNillableReason(s *string) *BookRequestUpdate {
	if s != nil {
		bru.SetReason(*s)
	}
	return bru
}

// SetApproved sets the "approved" field.
func (bru *BookRequestUpdate) SetApproved(b bookrequest.Approved) *BookRequestUpdate {
	bru.mutation.SetApproved(b)
	return bru
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (bru *BookRequestUpdate) SetNillableApproved(b *bookrequest.Approved) *BookRequestUpdate {
	if b != nil {
		bru.SetApproved(*b)
	}
	return bru
}

// SetUpdatedAt sets the "updated_at" field.
func (bru *BookRequestUpdate) SetUpdatedAt(t time.Time) *BookRequestUpdate {
	bru.mutation.SetUpdatedAt(t)
	return bru
}

// Mutation returns the BookRequestMutation object of the builder.
func (bru *BookRequestUpdate) Mutation() *BookRequestMutation {
	return bru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bru *BookRequestUpdate) Save(ctx context.Context) (int, error) {
	bru.defaults()
	return withHooks(ctx, bru.sqlSave, bru.mutation, bru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bru *BookRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := bru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bru *BookRequestUpdate) Exec(ctx context.Context) error {
	_, err := bru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bru *BookRequestUpdate) ExecX(ctx context.Context) {
	if err := bru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bru *BookRequestUpdate) defaults() {
	if _, ok := bru.mutation.UpdatedAt(); !ok {
		v := bookrequest.UpdateDefaultUpdatedAt()
		bru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bru *BookRequestUpdate) check() error {
	if v, ok := bru.mutation.Approved(); ok {
		if err := bookrequest.ApprovedValidator(v); err != nil {
			return &ValidationError{Name: "approved", err: fmt.Errorf(`ent: validator failed for field "BookRequest.approved": %w`, err)}
		}
	}
	return nil
}

func (bru *BookRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bookrequest.Table, bookrequest.Columns, sqlgraph.NewFieldSpec(bookrequest.FieldID, field.TypeInt))
	if ps := bru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bru.mutation.UserID(); ok {
		_spec.SetField(bookrequest.FieldUserID, field.TypeInt, value)
	}
	if value, ok := bru.mutation.AddedUserID(); ok {
		_spec.AddField(bookrequest.FieldUserID, field.TypeInt, value)
	}
	if value, ok := bru.mutation.Title(); ok {
		_spec.SetField(bookrequest.FieldTitle, field.TypeString, value)
	}
	if value, ok := bru.mutation.Author(); ok {
		_spec.SetField(bookrequest.FieldAuthor, field.TypeString, value)
	}
	if value, ok := bru.mutation.Publisher(); ok {
		_spec.SetField(bookrequest.FieldPublisher, field.TypeString, value)
	}
	if value, ok := bru.mutation.Reason(); ok {
		_spec.SetField(bookrequest.FieldReason, field.TypeString, value)
	}
	if value, ok := bru.mutation.Approved(); ok {
		_spec.SetField(bookrequest.FieldApproved, field.TypeEnum, value)
	}
	if value, ok := bru.mutation.UpdatedAt(); ok {
		_spec.SetField(bookrequest.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bru.mutation.done = true
	return n, nil
}

// BookRequestUpdateOne is the builder for updating a single BookRequest entity.
type BookRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookRequestMutation
}

// SetUserID sets the "user_id" field.
func (bruo *BookRequestUpdateOne) SetUserID(i int) *BookRequestUpdateOne {
	bruo.mutation.ResetUserID()
	bruo.mutation.SetUserID(i)
	return bruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bruo *BookRequestUpdateOne) SetNillableUserID(i *int) *BookRequestUpdateOne {
	if i != nil {
		bruo.SetUserID(*i)
	}
	return bruo
}

// AddUserID adds i to the "user_id" field.
func (bruo *BookRequestUpdateOne) AddUserID(i int) *BookRequestUpdateOne {
	bruo.mutation.AddUserID(i)
	return bruo
}

// SetTitle sets the "title" field.
func (bruo *BookRequestUpdateOne) SetTitle(s string) *BookRequestUpdateOne {
	bruo.mutation.SetTitle(s)
	return bruo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bruo *BookRequestUpdateOne) SetNillableTitle(s *string) *BookRequestUpdateOne {
	if s != nil {
		bruo.SetTitle(*s)
	}
	return bruo
}

// SetAuthor sets the "author" field.
func (bruo *BookRequestUpdateOne) SetAuthor(s string) *BookRequestUpdateOne {
	bruo.mutation.SetAuthor(s)
	return bruo
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (bruo *BookRequestUpdateOne) SetNillableAuthor(s *string) *BookRequestUpdateOne {
	if s != nil {
		bruo.SetAuthor(*s)
	}
	return bruo
}

// SetPublisher sets the "publisher" field.
func (bruo *BookRequestUpdateOne) SetPublisher(s string) *BookRequestUpdateOne {
	bruo.mutation.SetPublisher(s)
	return bruo
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (bruo *BookRequestUpdateOne) SetNillablePublisher(s *string) *BookRequestUpdateOne {
	if s != nil {
		bruo.SetPublisher(*s)
	}
	return bruo
}

// SetReason sets the "reason" field.
func (bruo *BookRequestUpdateOne) SetReason(s string) *BookRequestUpdateOne {
	bruo.mutation.SetReason(s)
	return bruo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (bruo *BookRequestUpdateOne) SetNillableReason(s *string) *BookRequestUpdateOne {
	if s != nil {
		bruo.SetReason(*s)
	}
	return bruo
}

// SetApproved sets the "approved" field.
func (bruo *BookRequestUpdateOne) SetApproved(b bookrequest.Approved) *BookRequestUpdateOne {
	bruo.mutation.SetApproved(b)
	return bruo
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (bruo *BookRequestUpdateOne) SetNillableApproved(b *bookrequest.Approved) *BookRequestUpdateOne {
	if b != nil {
		bruo.SetApproved(*b)
	}
	return bruo
}

// SetUpdatedAt sets the "updated_at" field.
func (bruo *BookRequestUpdateOne) SetUpdatedAt(t time.Time) *BookRequestUpdateOne {
	bruo.mutation.SetUpdatedAt(t)
	return bruo
}

// Mutation returns the BookRequestMutation object of the builder.
func (bruo *BookRequestUpdateOne) Mutation() *BookRequestMutation {
	return bruo.mutation
}

// Where appends a list predicates to the BookRequestUpdate builder.
func (bruo *BookRequestUpdateOne) Where(ps ...predicate.BookRequest) *BookRequestUpdateOne {
	bruo.mutation.Where(ps...)
	return bruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bruo *BookRequestUpdateOne) Select(field string, fields ...string) *BookRequestUpdateOne {
	bruo.fields = append([]string{field}, fields...)
	return bruo
}

// Save executes the query and returns the updated BookRequest entity.
func (bruo *BookRequestUpdateOne) Save(ctx context.Context) (*BookRequest, error) {
	bruo.defaults()
	return withHooks(ctx, bruo.sqlSave, bruo.mutation, bruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bruo *BookRequestUpdateOne) SaveX(ctx context.Context) *BookRequest {
	node, err := bruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bruo *BookRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := bruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bruo *BookRequestUpdateOne) ExecX(ctx context.Context) {
	if err := bruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bruo *BookRequestUpdateOne) defaults() {
	if _, ok := bruo.mutation.UpdatedAt(); !ok {
		v := bookrequest.UpdateDefaultUpdatedAt()
		bruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bruo *BookRequestUpdateOne) check() error {
	if v, ok := bruo.mutation.Approved(); ok {
		if err := bookrequest.ApprovedValidator(v); err != nil {
			return &ValidationError{Name: "approved", err: fmt.Errorf(`ent: validator failed for field "BookRequest.approved": %w`, err)}
		}
	}
	return nil
}

func (bruo *BookRequestUpdateOne) sqlSave(ctx context.Context) (_node *BookRequest, err error) {
	if err := bruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bookrequest.Table, bookrequest.Columns, sqlgraph.NewFieldSpec(bookrequest.FieldID, field.TypeInt))
	id, ok := bruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BookRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bookrequest.FieldID)
		for _, f := range fields {
			if !bookrequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bookrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bruo.mutation.UserID(); ok {
		_spec.SetField(bookrequest.FieldUserID, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.AddedUserID(); ok {
		_spec.AddField(bookrequest.FieldUserID, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.Title(); ok {
		_spec.SetField(bookrequest.FieldTitle, field.TypeString, value)
	}
	if value, ok := bruo.mutation.Author(); ok {
		_spec.SetField(bookrequest.FieldAuthor, field.TypeString, value)
	}
	if value, ok := bruo.mutation.Publisher(); ok {
		_spec.SetField(bookrequest.FieldPublisher, field.TypeString, value)
	}
	if value, ok := bruo.mutation.Reason(); ok {
		_spec.SetField(bookrequest.FieldReason, field.TypeString, value)
	}
	if value, ok := bruo.mutation.Approved(); ok {
		_spec.SetField(bookrequest.FieldApproved, field.TypeEnum, value)
	}
	if value, ok := bruo.mutation.UpdatedAt(); ok {
		_spec.SetField(bookrequest.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &BookRequest{config: bruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bruo.mutation.done = true
	return _node, nil
}
