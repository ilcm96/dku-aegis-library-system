// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BooksColumns holds the columns for the "books" table.
	BooksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "author", Type: field.TypeString},
		{Name: "publisher", Type: field.TypeString},
		{Name: "quantity", Type: field.TypeInt, Default: 1},
		{Name: "borrow", Type: field.TypeInt, Default: 0},
		{Name: "cover", Type: field.TypeString},
		{Name: "category", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// BooksTable holds the schema information for the "books" table.
	BooksTable = &schema.Table{
		Name:       "books",
		Columns:    BooksColumns,
		PrimaryKey: []*schema.Column{BooksColumns[0]},
	}
	// BookLogsColumns holds the columns for the "book_logs" table.
	BookLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "action", Type: field.TypeEnum, Enums: []string{"CREATE", "UPDATE", "DELETE", "BORROW", "RETURN"}},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "book_id", Type: field.TypeInt},
		{Name: "book_title", Type: field.TypeString},
		{Name: "request_id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
	}
	// BookLogsTable holds the schema information for the "book_logs" table.
	BookLogsTable = &schema.Table{
		Name:       "book_logs",
		Columns:    BookLogsColumns,
		PrimaryKey: []*schema.Column{BookLogsColumns[0]},
	}
	// BookRequestsColumns holds the columns for the "book_requests" table.
	BookRequestsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "title", Type: field.TypeString},
		{Name: "author", Type: field.TypeString},
		{Name: "publisher", Type: field.TypeString},
		{Name: "reason", Type: field.TypeString},
		{Name: "approved", Type: field.TypeEnum, Enums: []string{"PENDING", "APPROVED", "REJECTED"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// BookRequestsTable holds the schema information for the "book_requests" table.
	BookRequestsTable = &schema.Table{
		Name:       "book_requests",
		Columns:    BookRequestsColumns,
		PrimaryKey: []*schema.Column{BookRequestsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "password", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// BookUserColumns holds the columns for the "book_user" table.
	BookUserColumns = []*schema.Column{
		{Name: "book_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// BookUserTable holds the schema information for the "book_user" table.
	BookUserTable = &schema.Table{
		Name:       "book_user",
		Columns:    BookUserColumns,
		PrimaryKey: []*schema.Column{BookUserColumns[0], BookUserColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "book_user_book_id",
				Columns:    []*schema.Column{BookUserColumns[0]},
				RefColumns: []*schema.Column{BooksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "book_user_user_id",
				Columns:    []*schema.Column{BookUserColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BooksTable,
		BookLogsTable,
		BookRequestsTable,
		UsersTable,
		BookUserTable,
	}
)

func init() {
	BookUserTable.ForeignKeys[0].RefTable = BooksTable
	BookUserTable.ForeignKeys[1].RefTable = UsersTable
}
